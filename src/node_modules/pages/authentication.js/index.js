import React, { useState, useEffect, useContext } from "react";
import { Link, Redirect } from "react-router-dom";

import useFetch from "../../hooks/useFetch";
import useLocalStorage from "../../hooks/useLocalStorage";
import { CurrentUserContext } from "../../contexts/currentUser";
import BackendErrorMessages from './components/backendErrorMessages'


const Authentication = props => {
  const isLogin = props.match.path === "/login";

  // console.log(isLogin);
  const pageTitle = isLogin ? "Sign In" : "Sign Up";
  const descriptionLink = isLogin ? "/register" : "/login";
  const descriptionText = isLogin ? "Need an account" : "Have an account?";
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
 // const [isSubmitting, setIsSubmitting] = useState(false);
  const [username, setUsername] = useState("");
  const apiUrl = isLogin ? "/users/login" : "/users";
  const [{ isLoading, response, error }, doFetch] = useFetch(apiUrl);
  const [isSucessfulSubmit, setIsSucessfulSubmit] = useState(false);
  const [token, setToken] = useLocalStorage("token");

  const [currentUserState, setCurrentUserState] = useContext(
    CurrentUserContext
  );
  

  const handleSubmit = e => {
    e.preventDefault();
    const user = isLogin ? { email, password } : { email, password, username };
    doFetch({
      method: "post",
      data: {
        user
      }
    });
  //  setIsSubmitting(true);
  };
  useEffect(() => {
    if (!response) {
      return;
    }
    setToken(response.user.token);
    setIsSucessfulSubmit(true);
    setCurrentUserState(state => ({
      ...state,
      isLogged: true,
      isLoading: false,
      currentUser: response.user
    }));
  }, [response, setToken, setCurrentUserState]);

  if (isSucessfulSubmit) {
    return <Redirect to="/" />;
  }

  return (
    <div className="auth-page">
      <div className="container-page">
        <div className="row">
          <div>
            <h1>{pageTitle}</h1>
            <p>
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            { isLogin && error && <BackendErrorMessages backendErrors = {error.errors} />}
            <form onSubmit={handleSubmit}>
              {!isLogin && (
                <input
                  type="text"
                  placeholder="Username"
                  value={username}
                  onChange={e => setUsername(e.target.value)}
                />
              )}
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={e => setEmail(e.target.value)}
              />
              <input
                type="password"
                className="form-control"
                placeholder="Password"
                value={password}
                onChange={e => setPassword(e.target.value)}
              />
              <button type="submit">
                {pageTitle}
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};
export default Authentication;
